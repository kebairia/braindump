:PROPERTIES:
:ID:       05ddded7-201b-4bc3-aa37-74055321a1a2
:END:
#+title: setup pacemaker
#+filetags: pacemaker ha
this is the primary setup of the [[id:8d147696-b236-44e3-b284-d0618c612d59][pacemaker]] resource manager
* Pre-Configuration
- setting the hostname on each node
  #+begin_src sh
  # pcmk1
  hostnamectl set-hostname pcmk1.mylab.local
  # pcmk2
  hostnamectl set-hostname pcmk2.mylab.local
  # setting hostnames on /etc/hosts file, or you can use a dedicated DNS server
  echo "192.168.121.41 pcmk1.mylab.local pcmk1 > /etc/hosts"
  echo "192.168.121.42 pcmk2.mylab.local pcmk2 > /etc/hosts"
  #+end_src
* Installation and configuration
- enable the *ha* repo
  #+begin_src sh
    sudo dnf config-manager --enable ha
  #+end_src
- install required packages
  #+begin_src sh
    sudo dnf install pacemaker pcs psmisc policycoreutils-python3
  #+end_src
- start enable pcsd service
  #+begin_src sh
    sudo systemctl enable --now pcsd 
  #+end_src
- enable high availability on firewall
  #+begin_src sh
    sudo firewall-cmd --add-service=high availability
  #+end_src
- pacemaker uses an user named *hacluster* to control its nodes, we need to set a password to that account
  #+begin_src sh
    sudo echo 'yourpassword' | passwd --stdin hacluster
  #+end_src
* Pacemaker configuration
- authenticate the nodes you want with pacemaker.
  #+begin_src sh
    pcs host auth pcmk1 pcmk2
  #+end_src
- setup your new cluster, choose a name for it and add your choosen nodes to it
  #+begin_src sh
    pcs cluster setup mycluster pcmk1 pcmk2
  #+end_src
- then start your cluster, you can start all of your nodes from the controlling node(here is *pcmk1*):
  #+begin_src sh
    pcs cluster start --all
  #+end_src
- or you can start it from each node using:
  #+begin_src sh
    pcs cluster start 
  #+end_src
- you can also start the cluster by starting the *corosync* and *pacemaker* service using systemctl commmand on each node:
  #+begin_src sh
    sudo systemctl start corosync.service
    sudo systemctl start pacemaker.service
  #+end_src
- fianlly you can verify you cluster state:
  - checking your cluster communication
    #+begin_src sh
      corosync-cfgtool -s 
  #+end_src
  - checking your cluster status 
    #+begin_src sh
      pcs status
    #+end_src

