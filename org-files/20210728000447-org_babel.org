:PROPERTIES:
:ID:       6c97962e-0f49-468e-aad1-e06d74532767
:END:
#+title: org babel
#+filetags: org_mode emacs
- org babel is one of the great feature that [[id:6ce3c5bf-44cc-419a-b881-07f4000c79a4][org-mode]] have.
* global options
- you can specify global options on the header of the org file with the =#+PROPERTY= keyword
#+PROPERTY:  header-args :results none :tangle ~/path/to/file
* tables and code
** pass tables to code blocks
#+NAME: table01
| a1 | a2 | a3 |
| b1 | b2 | b3 |
| c1 | c2 | c3 |

#+begin_src python :results output :var tab=table01
  print("my table:", tab)
#+end_src

#+RESULTS:
: my table: [['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3']]

#+begin_src sh :results output :var tab2=table01
  echo "my table N02: " $tab2
#+end_src

#+RESULTS:
: my table N02:  a1 a2 a3 b1 b2 b3 c1 c2 c3
*** pass only part of the table
- passing a complete row
#+begin_src python :results output :var tab=table01[2]
  print("third row is: ", tab)
#+end_src

#+RESULTS:
: third row is:  ['c1', 'c2', 'c3']
- passing a column
#+begin_src python :results output :var tab=table01[,1]
  print("second column is:", tab)
#+end_src

#+RESULTS:
: second column is: ['a2', 'b2', 'c2']
- partial rows
  #+begin_src python :results output :var tab=table01[0:1,1:2]
  print(tab)
  #+end_src

  #+RESULTS:
  : [['a2', 'a3'], ['b2', 'b3']]
*** =colnames= header keyword controls how column names are processed
#+NAME: table02
| a1 | a2 | a3 |
| b1 | b2 | b3 |
| c1 | c2 | c3 |
- without =colnames=, or you can use =colnames = no=
#+begin_src python :results output :var tab=table02 
  upchar = lambda x: x.upper()
  newtab = []
  for row in tab:
      newtab.append([upchar(x) for x in row])
  print(newtab)
#+end_src

#+RESULTS:
: [['A1', 'A2', 'A3'], ['B1', 'B2', 'B3'], ['C1', 'C2', 'C3']]
#+begin_src python :results output :var tab=table02 :colnames no
  upchar = lambda x: x.upper()
  newtab = []
  for row in tab:
      newtab.append([upchar(x) for x in row])
  print(newtab)
#+end_src

#+RESULTS:
: [['A1', 'A2', 'A3'], ['B1', 'B2', 'B3'], ['C1', 'C2', 'C3']]

- with =colnames = nil=
#+begin_src python :results output :var tab=table02 :colnames nil
  upchar = lambda x: x.upper()
  newtab = []
  for row in tab:
      newtab.append([upchar(x) for x in row])
  print(newtab)
#+end_src
#+RESULTS:
: [['B1', 'B2', 'B3'], ['C1', 'C2', 'C3']]
*** =rownames= keyword
#+begin_src python :results output :var tab=table02 :rownames yes
  print(tab)
#+end_src

#+RESULTS:
: [['a2', 'a3'], ['b2', 'b3'], ['c2', 'c3']]
** =:results= header keyword determine how code block's results are handled
- =output= gives you the result as it showed to the *standard output*
#+begin_src sh :results output
  echo "line 0\nline 1\nline 2\nline 3"
#+end_src

#+RESULTS:
: line 0
: line 1
: line 2
: line 3

- =value= gives you the *exit status* of the last command line
#+RESULTS:
: line0
: line1
: line2
: line3
#+begin_src sh :results value
  echo "line 0\nline 1\nline 2\nline 3"
#+end_src

#+RESULTS:
: 0

#+begin_src sh :results value
llll
#+end_src

#+RESULTS:
: 127
- using =table= keyword with the =:results= header render the result into a table
#+begin_src sh :results output table
  echo "line 0\nline 1\nline 2\nline 3"
#+end_src

#+RESULTS:
| line | 0 |
| line | 1 |
| line | 2 |
| line | 3 |
- we can name the the code block, so that we can use the resulting table in another code block or any part of the org file
  #+NAME: my-table
  #+begin_src sh :results output table
    echo "line one\nline two\nline three\nline four"
  #+end_src

  #+RESULTS: my-table
  | line | one   |
  | line | two   |
  | line | three |
  | line | four  |
  #+begin_src python :results output :var tab=my-table
    upchar = lambda x: x.upper()
    newtab = []
    for row in tab:
        newtab.append([upchar(x) for x in row])
    print(newtab)
#+end_src

#+RESULTS:
: [['LINE', 'ONE'], ['LINE', 'TWO'], ['LINE', 'THREE'], ['LINE', 'FOUR']]
** using the =org-sbe= macro
- put the cursor on the =TBLFM= and press =C-c C-c=
#+NAME: random-sum
#+begin_src python :results value :var x=0
  from random import random
  return (x + random())
#+end_src

| value | random sum with python |
|-------+------------------------|
|     2 |                 2.6219 |
#+TBLFM: $2='(org-sbe random-sum (x $1)); %.4f

